#include <GL/glut.h>
#include <cstdlib>
#include <iostream>
using namespace std;
int x1,y1,x2,y2,x3,y3,x4,y4,Tx,Ty;
bool first=true,second=true;
void myInit(){
glClearColor(1.0,1.0,1.0,1.0);
glMatrixMode(GL_PROJECTION);
gluOrtho2D(0,800,0,800);
}
void line(int x1,int y1,int x2,int y2) {
glLineWidth(2);
glBegin(GL_LINE_LOOP);
glVertex2i(x1,y1);
glVertex2i(x2,y2);
glEnd();
glFlush();
}
void axis(){
glColor3f(0.0,0.0,0.0);
line(0,400,800,400);
line(400,0,400,800);
for(int x=0;x<=800;x+=20) {
line(x,380,x,415);
}
for(int y=0;y<=800;y+=20) {
line(370,y,425,y);
}
}
void draw(){
glLineWidth(3);
glPointSize(2);
glClear(GL_COLOR_BUFFER_BIT);
axis();
glColor3f(1,0,0);
glBegin(GL_LINE_LOOP);
glVertex2i(x1,y1);
glVertex2i(x2,y2);
glVertex2i(x3,y3);
glVertex2i(x4,y4);
glEnd();
glFlush();
}
void myDisplay(){
glClear(GL_COLOR_BUFFER_BIT);
glFlush();
}
void translate(){
glClearColor(1.0,1.0,1.0,1.0);
glLineWidth(3);
glPointSize(2);
glClear(GL_COLOR_BUFFER_BIT);
axis();
glColor3f(0,1,0);
glBegin(GL_LINE_LOOP);
glVertex2i(x1+Tx,y1+Ty);
glVertex2i(x2+Tx,y2+Ty);
glVertex2i(x3+Tx,y3+Ty);
glVertex2i(x4+Tx,y4+Ty);
glEnd();
glFlush();
}
void mouse(int btn,int state,int x,int y){
if(btn==GLUT_RIGHT_BUTTON){
if(state==GLUT_DOWN){
if(first){
axis();
glFlush();
first=false;
}
else if(second){
draw();
glFlush();
second=false;
}
else{
translate();
glFlush();
}
}
}
}
int main(int argc, char **argv)
{
cout<<"Enter four vertices of a quadrilateral"<<endl;
cin>>x1>>y1>>x2>>y2>>x3>>y3>>x4>>y4;
x1=x1+400;
y1=y1+400;
x2=x2+400;
y2=y2+400;
x3=x3+400;
y3=y3+400;
x4=x4+400;
y4=y4+400;
cout<<"Enter Tx,Ty"<<endl;
cin>>Tx>>Ty;
glutInit(&argc,argv);
glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
glutInitWindowSize(800,800);
glutInitWindowPosition(500,500);
glutCreateWindow("Translate");
glutDisplayFunc(myDisplay);
glutMouseFunc(mouse);
myInit();
glutMainLoop();
return 0;
}