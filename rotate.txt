#include <GL/glut.h>
#include <cstdlib>
#include <iostream>
#include <math.h>
using namespace std;
int x1,y1_,x2,y2,x3,y3,x4,y4,X1,Y1_,X2,Y2,X3,Y3,X4,Y4,d;
bool first=true,second=true;
void myInit(){
glClearColor(1.0,1.0,1.0,1.0);
glMatrixMode(GL_PROJECTION);
gluOrtho2D(0,800,0,800);
}
void line(int x1,int y1_,int x2,int y2) {
glLineWidth(2);
glBegin(GL_LINE_LOOP);
glVertex2i(x1,y1_);
glVertex2i(x2,y2);
glEnd();
glFlush();
}
void axis(){
glColor3f(0.0,0.0,0.0);
line(0,400,800,400);
line(400,0,400,800);
for(int x=0;x<=800;x+=20) {
line(x,395,x,405);
}
for(int y=0;y<=800;y+=20) {
line(395,y,405,y);
}
}
void draw(){
glLineWidth(3);
glPointSize(2);
glClear(GL_COLOR_BUFFER_BIT);
axis();
glColor3f(1,0,0);
glBegin(GL_LINE_LOOP);
glVertex2i(x1,y1_);
glVertex2i(x2,y2);
glVertex2i(x3,y3);
glVertex2i(x4,y4);
glEnd();
glFlush();
}
void myDisplay(){
glClear(GL_COLOR_BUFFER_BIT);
glFlush();
}
void rotate(){
glClearColor(1.0,1.0,1.0,1.0);
glLineWidth(3);
glPointSize(2);
glClear(GL_COLOR_BUFFER_BIT);
axis();
d*=M_PI/180;
// x1=x1-400;
// y1_=y1_-400;
// x2=x2-400;
// y2=y2-400;
// x3=x3-400;
// y3=y3-400;
// x4=x4-400;
// y4=y4-400;
X1=x1*cos(d)-y1_*sin(d);
Y1_=x1*cos(d)+y1_*sin(d);
X2=x2*cos(d)-y2*sin(d);
Y2=x2*cos(d)+y2*sin(d);
X3=x3*cos(d)-y3*sin(d);
Y3=x3*cos(d)+y3*sin(d);
X4=x4*cos(d)-y4*sin(d);
Y4=x4*cos(d)+y4*sin(d);
// X1=X1+400;
// Y1_=Y1_+400;
// X2=X2+400;
// Y2=Y2+400;
// X3=X3+400;
// Y3=Y3+400;
// X4=X4+400;
// Y4=Y4+400;
glColor3f(0,1,0);
glBegin(GL_LINE_LOOP);
glVertex2i(X1,Y1_);
glVertex2i(X2,Y2);
glVertex2i(X3,Y3);
glVertex2i(X4,Y4);
glEnd();
glFlush();
}
void mouse(int btn,int state,int x,int y){
if(btn==GLUT_LEFT_BUTTON){
if(state==GLUT_DOWN){
if(first){
axis();
glFlush();
first=false;
}
else if(second){
draw();
glFlush();
second=false;
}
else{
rotate();
glFlush();
}
}
}
}
int main(int argc, char **argv)
{
cout<<"Enter four vertices of a quadrilateral"<<endl;
cin>>x1>>y1_>>x2>>y2>>x3>>y3>>x4>>y4;
x1=x1+400;
y1_=y1_+400;
x2=x2+400;
y2=y2+400;
x3=x3+400;
y3=y3+400;
x4=x4+400;
y4=y4+400;
cout<<"Enter degree of rotation"<<endl;
cin>>d;
glutInit(&argc,argv);
glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
glutInitWindowSize(800,800);
glutInitWindowPosition(500,500);
glutCreateWindow("Translate");
glutDisplayFunc(myDisplay);
glutMouseFunc(mouse);
myInit();
glutMainLoop();
return 0;
}